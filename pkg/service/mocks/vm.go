// Code generated by mockery v2.2.1. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"

	task "github.com/xabinapal/gopve/pkg/types/task"

	vm "github.com/xabinapal/gopve/pkg/types/vm"
)

// VirtualMachine is an autogenerated mock type for the VirtualMachine type
type VirtualMachine struct {
	mock.Mock
}

// CreateLXC provides a mock function with given fields: opts
func (_m *VirtualMachine) CreateLXC(opts vm.LXCCreateOptions) (task.Task, error) {
	ret := _m.Called(opts)

	var r0 task.Task
	if rf, ok := ret.Get(0).(func(vm.LXCCreateOptions) task.Task); ok {
		r0 = rf(opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(task.Task)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(vm.LXCCreateOptions) error); ok {
		r1 = rf(opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateQEMU provides a mock function with given fields: opts
func (_m *VirtualMachine) CreateQEMU(opts vm.QEMUCreateOptions) (task.Task, error) {
	ret := _m.Called(opts)

	var r0 task.Task
	if rf, ok := ret.Get(0).(func(vm.QEMUCreateOptions) task.Task); ok {
		r0 = rf(opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(task.Task)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(vm.QEMUCreateOptions) error); ok {
		r1 = rf(opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// List provides a mock function with given fields:
func (_m *VirtualMachine) List() ([]vm.VirtualMachine, error) {
	ret := _m.Called()

	var r0 []vm.VirtualMachine
	if rf, ok := ret.Get(0).(func() []vm.VirtualMachine); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]vm.VirtualMachine)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
