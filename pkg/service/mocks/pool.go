// Code generated by mockery v2.2.1. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	pool "github.com/xabinapal/gopve/pkg/types/pool"
)

// Pool is an autogenerated mock type for the Pool type
type Pool struct {
	mock.Mock
}

// Create provides a mock function with given fields: name, props
func (_m *Pool) Create(name string, props pool.PoolProperties) error {
	ret := _m.Called(name, props)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, pool.PoolProperties) error); ok {
		r0 = rf(name, props)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: name
func (_m *Pool) Delete(name string) error {
	ret := _m.Called(name)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: name
func (_m *Pool) Get(name string) (pool.Pool, error) {
	ret := _m.Called(name)

	var r0 pool.Pool
	if rf, ok := ret.Get(0).(func(string) pool.Pool); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(pool.Pool)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// List provides a mock function with given fields:
func (_m *Pool) List() ([]pool.Pool, error) {
	ret := _m.Called()

	var r0 []pool.Pool
	if rf, ok := ret.Get(0).(func() []pool.Pool); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]pool.Pool)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
