// Code generated by mockery v2.2.1. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	cluster "github.com/xabinapal/gopve/pkg/types/cluster"

	service "github.com/xabinapal/gopve/pkg/service"

	task "github.com/xabinapal/gopve/pkg/types/task"
)

// Cluster is an autogenerated mock type for the Cluster type
type Cluster struct {
	mock.Mock
}

// Create provides a mock function with given fields: name, props
func (_m *Cluster) Create(name string, props cluster.NodeProperties) (task.Task, error) {
	ret := _m.Called(name, props)

	var r0 task.Task
	if rf, ok := ret.Get(0).(func(string, cluster.NodeProperties) task.Task); ok {
		r0 = rf(name, props)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(task.Task)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, cluster.NodeProperties) error); ok {
		r1 = rf(name, props)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields:
func (_m *Cluster) Get() (cluster.Cluster, error) {
	ret := _m.Called()

	var r0 cluster.Cluster
	if rf, ok := ret.Get(0).(func() cluster.Cluster); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(cluster.Cluster)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// HA provides a mock function with given fields:
func (_m *Cluster) HA() service.HighAvailability {
	ret := _m.Called()

	var r0 service.HighAvailability
	if rf, ok := ret.Get(0).(func() service.HighAvailability); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(service.HighAvailability)
		}
	}

	return r0
}

// Join provides a mock function with given fields: hostname, password, fingerprint, props
func (_m *Cluster) Join(hostname string, password string, fingerprint string, props cluster.NodeProperties) (task.Task, error) {
	ret := _m.Called(hostname, password, fingerprint, props)

	var r0 task.Task
	if rf, ok := ret.Get(0).(func(string, string, string, cluster.NodeProperties) task.Task); ok {
		r0 = rf(hostname, password, fingerprint, props)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(task.Task)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, string, cluster.NodeProperties) error); ok {
		r1 = rf(hostname, password, fingerprint, props)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
