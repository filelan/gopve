// Code generated by mockery v2.2.1. DO NOT EDIT.

package mocks

import (
	cluster "github.com/xabinapal/gopve/pkg/types/cluster"
	firewall "github.com/xabinapal/gopve/pkg/types/firewall"

	mock "github.com/stretchr/testify/mock"

	service "github.com/xabinapal/gopve/pkg/service"

	task "github.com/xabinapal/gopve/pkg/types/task"
)

// Cluster is an autogenerated mock type for the Cluster type
type Cluster struct {
	mock.Mock
}

// AddFirewallRule provides a mock function with given fields: rule
func (_m *Cluster) AddFirewallRule(rule firewall.Rule) error {
	ret := _m.Called(rule)

	var r0 error
	if rf, ok := ret.Get(0).(func(firewall.Rule) error); ok {
		r0 = rf(rule)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Create provides a mock function with given fields: name, props
func (_m *Cluster) Create(name string, props cluster.NodeProperties) (task.Task, error) {
	ret := _m.Called(name, props)

	var r0 task.Task
	if rf, ok := ret.Get(0).(func(string, cluster.NodeProperties) task.Task); ok {
		r0 = rf(name, props)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(task.Task)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, cluster.NodeProperties) error); ok {
		r1 = rf(name, props)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteFirewallRule provides a mock function with given fields: pos, digest
func (_m *Cluster) DeleteFirewallRule(pos uint, digest string) error {
	ret := _m.Called(pos, digest)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint, string) error); ok {
		r0 = rf(pos, digest)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// EditFirewallRule provides a mock function with given fields: pos, rule
func (_m *Cluster) EditFirewallRule(pos uint, rule firewall.Rule) error {
	ret := _m.Called(pos, rule)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint, firewall.Rule) error); ok {
		r0 = rf(pos, rule)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields:
func (_m *Cluster) Get() (cluster.Cluster, error) {
	ret := _m.Called()

	var r0 cluster.Cluster
	if rf, ok := ret.Get(0).(func() cluster.Cluster); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(cluster.Cluster)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetFirewallAlias provides a mock function with given fields: name
func (_m *Cluster) GetFirewallAlias(name string) (firewall.Alias, error) {
	ret := _m.Called(name)

	var r0 firewall.Alias
	if rf, ok := ret.Get(0).(func(string) firewall.Alias); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(firewall.Alias)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetFirewallIPSet provides a mock function with given fields: name
func (_m *Cluster) GetFirewallIPSet(name string) (firewall.IPSet, error) {
	ret := _m.Called(name)

	var r0 firewall.IPSet
	if rf, ok := ret.Get(0).(func(string) firewall.IPSet); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(firewall.IPSet)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetFirewallProperties provides a mock function with given fields:
func (_m *Cluster) GetFirewallProperties() (firewall.ClusterProperties, error) {
	ret := _m.Called()

	var r0 firewall.ClusterProperties
	if rf, ok := ret.Get(0).(func() firewall.ClusterProperties); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(firewall.ClusterProperties)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetFirewallRule provides a mock function with given fields: pos
func (_m *Cluster) GetFirewallRule(pos uint) (firewall.Rule, error) {
	ret := _m.Called(pos)

	var r0 firewall.Rule
	if rf, ok := ret.Get(0).(func(uint) firewall.Rule); ok {
		r0 = rf(pos)
	} else {
		r0 = ret.Get(0).(firewall.Rule)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(pos)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetFirewallServiceGroup provides a mock function with given fields: name
func (_m *Cluster) GetFirewallServiceGroup(name string) (firewall.ServiceGroup, error) {
	ret := _m.Called(name)

	var r0 firewall.ServiceGroup
	if rf, ok := ret.Get(0).(func(string) firewall.ServiceGroup); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(firewall.ServiceGroup)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// HA provides a mock function with given fields:
func (_m *Cluster) HA() service.HighAvailability {
	ret := _m.Called()

	var r0 service.HighAvailability
	if rf, ok := ret.Get(0).(func() service.HighAvailability); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(service.HighAvailability)
		}
	}

	return r0
}

// Join provides a mock function with given fields: hostname, password, fingerprint, props
func (_m *Cluster) Join(hostname string, password string, fingerprint string, props cluster.NodeProperties) (task.Task, error) {
	ret := _m.Called(hostname, password, fingerprint, props)

	var r0 task.Task
	if rf, ok := ret.Get(0).(func(string, string, string, cluster.NodeProperties) task.Task); ok {
		r0 = rf(hostname, password, fingerprint, props)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(task.Task)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, string, cluster.NodeProperties) error); ok {
		r1 = rf(hostname, password, fingerprint, props)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListFirewallAliases provides a mock function with given fields:
func (_m *Cluster) ListFirewallAliases() ([]firewall.Alias, error) {
	ret := _m.Called()

	var r0 []firewall.Alias
	if rf, ok := ret.Get(0).(func() []firewall.Alias); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]firewall.Alias)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListFirewallIPSets provides a mock function with given fields:
func (_m *Cluster) ListFirewallIPSets() ([]firewall.IPSet, error) {
	ret := _m.Called()

	var r0 []firewall.IPSet
	if rf, ok := ret.Get(0).(func() []firewall.IPSet); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]firewall.IPSet)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListFirewallRules provides a mock function with given fields:
func (_m *Cluster) ListFirewallRules() ([]firewall.Rule, error) {
	ret := _m.Called()

	var r0 []firewall.Rule
	if rf, ok := ret.Get(0).(func() []firewall.Rule); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]firewall.Rule)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListFirewallServiceGroups provides a mock function with given fields:
func (_m *Cluster) ListFirewallServiceGroups() ([]firewall.ServiceGroup, error) {
	ret := _m.Called()

	var r0 []firewall.ServiceGroup
	if rf, ok := ret.Get(0).(func() []firewall.ServiceGroup); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]firewall.ServiceGroup)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MoveFirewallRule provides a mock function with given fields: pos, newpos
func (_m *Cluster) MoveFirewallRule(pos uint, newpos uint) error {
	ret := _m.Called(pos, newpos)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint, uint) error); ok {
		r0 = rf(pos, newpos)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetFirewallProperties provides a mock function with given fields: props
func (_m *Cluster) SetFirewallProperties(props firewall.ClusterProperties) error {
	ret := _m.Called(props)

	var r0 error
	if rf, ok := ret.Get(0).(func(firewall.ClusterProperties) error); ok {
		r0 = rf(props)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
